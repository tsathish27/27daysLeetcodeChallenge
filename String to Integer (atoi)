class Solution:
    def myAtoi(self, s: str) -> int:
        INT_MAX = 2**31 - 1
        INT_MIN = -2**31
        
        index = 0
        result = 0
        sign = 1
        
        # Ignore leading whitespace
        while index < len(s) and s[index] == ' ':
            index += 1
        
        # Check for sign
        if index < len(s) and (s[index] == '+' or s[index] == '-'):
            sign = -1 if s[index] == '-' else 1
            index += 1
        
        # Convert digits to integer
        while index < len(s) and s[index].isdigit():
            digit = int(s[index])
            # Check for overflow
            if result > (INT_MAX - digit) // 10:
                return INT_MAX if sign == 1 else INT_MIN
            result = result * 10 + digit
            index += 1
        
        # Apply sign
        result *= sign
        
        # Clamp the result within the 32-bit integer range
        return min(max(result, INT_MIN), INT_MAX)
